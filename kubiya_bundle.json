{
  "tools": [
    {
      "name": "test_123",
      "source": null,
      "alias": null,
      "description": "Prints pandas {name}!",
      "type": "docker",
      "content": "\n. .venv/bin/activate > /dev/null 2>&1\n\npython /tmp/main.py \"{{ .name }}\" \"{{ .boolean_val }}\" \"{{ .optional_str }}\"\n",
      "content_url": null,
      "args": [
        {
          "name": "name",
          "type": null,
          "description": "Input param for arg: name, type: string",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "boolean_val",
          "type": null,
          "description": "Input param for arg: boolean_val, type: string, Options: true, false",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "optional_str",
          "type": null,
          "description": "Input param for arg: optional_str, type: string",
          "required": false,
          "default": "sheeesh",
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "TEST_SECRET"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/main.py",
          "content": "\nfrom typing import Annotated\n\nimport typer\n\napp = typer.Typer(rich_markup_mode=None, add_completion=False)\n\ndef test_123(\n    name: str,\n    boolean_val: bool,  # This will validate that the input is a boolean\n    optional_str: Annotated[str, typer.Argument()] = \"sheeesh\",  # This is how to add a default value\n):\n    import pandas as pd\n    import os\n    import base64\n\n    print(f\"Hello {name}! Request user: {os.environ.get('KUBIYA_USER_EMAIL', 'no user')}. Secret: {base64.b64encode(os.environ.get('TEST_SECRET', 'no secret').encode('ascii'))}. {boolean_val} {optional_str}\")\n    df = pd.DataFrame({\"name\": [name], \"boolean_val\": [boolean_val], \"test\": [optional_str]})\n\n    print(df)\n\n\napp.command()(test_123)\n\nif __name__ == \"__main__\":\n    app()\n"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "python:3.12-slim",
      "long_running": false,
      "on_start": null,
      "on_build": "\napt-get update && apt-get install -y curl > /dev/null 2>&1\n\ncurl -LsSf https://astral.sh/uv/0.4.27/install.sh | sh > /dev/null 2>&1\n\nexport PATH=\"/root/.cargo/bin/:$PATH\"\n\nuv venv > /dev/null 2>&1\n\n. .venv/bin/activate > /dev/null 2>&1\n\nuv pip install pandas==2.2.3 typer==0.12.5 > /dev/null 2>&1\n",
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"test_123\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"name (Required)<br/>Input param for arg: name, type: string\"):::paramClass\n        Param1(\"boolean_val (Required)<br/>Input param for arg: boolean_val, type: string, Options: true, false\"):::paramClass\n        Param2(\"optional_str (Optional)<br/>Input param for arg: optional_str, type: string<br/>Default: sheeesh\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>. .venv/bin/activate > /dev/null 2>&1<br/><br/>python /tm...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12-slim\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>TEST_SECRET\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "get_instenv_logs",
      "source": null,
      "alias": null,
      "description": "Get failed environment logs from InstEnv",
      "type": "docker",
      "content": "\n. .venv/bin/activate > /dev/null 2>&1\n\npython /tmp/main.py \"{{ .environment_id }}\" \"{{ .run_id }}\" \"{{ .number_of_last_lines_from_log }}\"\n",
      "content_url": null,
      "args": [
        {
          "name": "environment_id",
          "type": null,
          "description": "Input param for arg: environment_id, type: string",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "run_id",
          "type": null,
          "description": "Input param for arg: run_id, type: string",
          "required": false,
          "default": "",
          "options": null,
          "options_from": null
        },
        {
          "name": "number_of_last_lines_from_log",
          "type": null,
          "description": "Input param for arg: number_of_last_lines_from_log, type: string",
          "required": false,
          "default": "100",
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "INSTENV_API_TOKEN"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/main.py",
          "content": "\nfrom typing import Annotated\n\nimport typer\n\napp = typer.Typer(rich_markup_mode=None, add_completion=False)\n\ndef get_instenv_logs(\n    environment_id: str,\n    run_id: Annotated[str, typer.Argument()] = \"\",\n    number_of_last_lines_from_log: Annotated[str, typer.Argument()] = \"100\",\n):\n    import requests\n    import os\n\n    class InstEnvHelper:\n        __API_URL = \"https://prod.instenv-ui.internal.atlassian.com/api/v2\"\n        __env_configurations = None\n\n        def __init__(self, env_id: str, env_run_id:str=None):\n            self.environment_id = env_id\n            self.run_id = env_run_id\n            self.headers = {\n                'Authorization': f\"Bearer {os.environ.get('INSTENV_API_TOKEN')}\"\n            }\n\n        def __make_request(self, endpoint: str, method: str = \"GET\"):\n            url = f\"{self.__API_URL}/{endpoint}\"\n            response = requests.request(\n                method,\n                url,\n                headers=self.headers\n            )\n            return response\n\n        def get_environment_configuration(self):\n            response = self.__make_request(f\"/environments/{self.environment_id}\")\n            self.__env_configurations = response.json()\n            return self.__env_configurations\n\n        def get_last_failed_run_id(self):\n            if self.run_id:\n                return self.run_id\n\n            if not self.__env_configurations:\n                self.get_environment_configuration()\n\n            for run in self.__env_configurations.get(\"runs\", []):\n                if run.get(\"status\") in [\"failed\", \"running-failed\"]:\n                    return run.get(\"id\")\n            return None\n\n        def get_run_logs(self, last_lines: int = 100):\n            failed_run_id = self.get_last_failed_run_id()\n            response = self.__make_request(\n                f\"/environments/{self.environment_id}/runs/{failed_run_id}/logs\"\n            )\n            if response.status_code != 200:\n                return (f\"Failed to get logs for run {failed_run_id}. Status code: {response.status_code}.\"\n                        f\"Response: {response.text}\")\n\n            return \"\\n\".join(response.text.replace(\"\\\\n\", \"\\n\").split(\"\\n\")[-last_lines:])\n\n\n    instenv = InstEnvHelper(environment_id, run_id if run_id else None)\n    last_logs = instenv.get_run_logs(int(number_of_last_lines_from_log))\n\n    print(last_logs)\n\n\napp.command()(get_instenv_logs)\n\nif __name__ == \"__main__\":\n    app()\n"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "python:3.12-slim",
      "long_running": false,
      "on_start": null,
      "on_build": "\napt-get update && apt-get install -y curl > /dev/null 2>&1\n\ncurl -LsSf https://astral.sh/uv/0.4.27/install.sh | sh > /dev/null 2>&1\n\nexport PATH=\"/root/.cargo/bin/:$PATH\"\n\nuv venv > /dev/null 2>&1\n\n. .venv/bin/activate > /dev/null 2>&1\n\nuv pip install requests==2.26.0 typer==0.12.5 > /dev/null 2>&1\n",
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"get_instenv_logs\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"environment_id (Required)<br/>Input param for arg: environment_id, type: string\"):::paramClass\n        Param1(\"run_id (Optional)<br/>Input param for arg: run_id, type: string<br/>Default: \"):::paramClass\n        Param2(\"number_of_last_lines_from_log (Optional)<br/>Input param for arg: number_of_last_lines_from_log, type: string<br/>Default: 100\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>. .venv/bin/activate > /dev/null 2>&1<br/><br/>python /tm...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12-slim\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>INSTENV_API_TOKEN\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "say_hello",
      "source": null,
      "alias": null,
      "description": "Prints hello {name}!",
      "type": "docker",
      "content": "\npython /tmp/main.py \"{{ .name }}\"\n",
      "content_url": null,
      "args": [
        {
          "name": "name",
          "type": null,
          "description": "name to say hello to",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "TEST_SECRET"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/main.py",
          "content": "import argparse\nimport os\n\n\ndef hello_world(name: str):\n    print(f\"Hello, {name}, Secret: {os.environ.get('TEST_SECRET', 'none secret')}!\")\n    print(os.environ.get(\"TEST_SECRET\", \"none secret\"))\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Print hello {name}!\")\n    parser.add_argument(\"name\", help=\"Name to say hello to\")\n\n    # Parse command-line arguments\n    args = parser.parse_args()\n\n    # Get coordinates for the given city\n    name = args.name\n\n    hello_world(name)\n"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "python:3.12",
      "long_running": false,
      "on_start": null,
      "on_build": "\ncurl -LsSf https://astral.sh/uv/0.4.27/install.sh | sh > /dev/null 2>&1\n. $HOME/.cargo/env\n\nuv venv > /dev/null 2>&1\n. .venv/bin/activate > /dev/null 2>&1\n\nif [ -f /tmp/requirements.txt ]; then\n    uv pip install -r /tmp/requirements.txt > /dev/null 2>&1\nfi\n",
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"say_hello\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"name (Required)<br/>name to say hello to\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /tmp/main.py \\\"{{ .name }}\\\"<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>TEST_SECRET\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    }
  ],
  "errors": [],
  "python_bundle_version": "3.11.11"
}